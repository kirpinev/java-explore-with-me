{
	"info": {
		"_postman_id": "288c53d8-bdae-475c-94f1-fe5795937baf",
		"name": "Ratings",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26323450"
	},
	"item": [
		{
			"name": "Добавление лайка к событию которое уже опубликовано",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let vote;",
							"    const voteTypes = [\"LIKE\", \"DISLIKE\"];",
							"",
							"    try {",
							"        const user1 = await api.addUser(rnd.getUser());",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user1.id, rnd.getEvent(category.id));",
							"        event = await api.publishEvent(event.id);",
							"        vote = rnd.getVote(event.id, user2.id, user1.id);",
							"        pm.environment.set('request_body', JSON.stringify(vote));",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"    pm.request.body.update({",
							"        mode: 'raw',",
							"        raw: JSON.stringify({...vote, voteType: voteTypes[vote.voteType]}),",
							"        options: { raw: { language: 'json' } }",
							"    });",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Запись о лайке должна содержать поля: eventId, userId, initiatorId, voteType\", function () {",
							"    pm.expect(target).to.have.property('eventId');",
							"    pm.expect(target).to.have.property('userId');",
							"    pm.expect(target).to.have.property('initiatorId');",
							"    pm.expect(target).to.have.property('voteType');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(target.eventId).equal(source.eventId, 'ID ивента должен соответствовать ID ивента с указанным идентификатором');",
							"    pm.expect(target.userId).equal(source.userId, 'ID пользователя должен соответствовать ID пользователя с указанным идентификатором');",
							"    pm.expect(target.initiatorId).equal(source.initiatorId, 'ID автора ивента должен соответствовать ID автора ивента с указанным идентификатором');",
							"    pm.expect(target.voteType).equal(source.voteType, 'Тип лайка должен соответствовать типу лайка с указанным идентификатором');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/votes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"votes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление лайка на событии которое уже опубликовано",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let vote;",
							"    const voteTypes = [\"LIKE\", \"DISLIKE\"];",
							"",
							"    try {",
							"        const user1 = await api.addUser(rnd.getUser());",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user1.id, rnd.getEvent(category.id));",
							"        event = await api.publishEvent(event.id);",
							"        vote = rnd.getVote(event.id, user2.id, user1.id, voteTypes[0]);",
							"        vote = await api.addVote(vote);",
							"        vote = {...vote, voteType: voteTypes[1]};",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"    pm.environment.set('request_body', JSON.stringify(vote));",
							"",
							"    pm.request.body.update({",
							"        mode: 'raw',",
							"        raw: JSON.stringify({...vote}),",
							"        options: { raw: { language: 'json' } }",
							"    });",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Запись о лайке должна содержать поля: eventId, userId, initiatorId, voteType\", function () {",
							"    pm.expect(target).to.have.property('eventId');",
							"    pm.expect(target).to.have.property('userId');",
							"    pm.expect(target).to.have.property('initiatorId');",
							"    pm.expect(target).to.have.property('voteType');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(target.eventId).equal(source.eventId, 'ID ивента должен соответствовать ID ивента с указанным идентификатором');",
							"    pm.expect(target.userId).equal(source.userId, 'ID пользователя должен соответствовать ID пользователя с указанным идентификатором');",
							"    pm.expect(target.initiatorId).equal(source.initiatorId, 'ID автора ивента должен соответствовать ID автора ивента с указанным идентификатором');",
							"    pm.expect(target.voteType).equal(source.voteType, 'Тип лайка должен соответствовать типу лайка с указанным идентификатором');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/votes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"votes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление лайка к событию с неподходящим статусом",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let vote;",
							"    const voteTypes = [\"LIKE\", \"DISLIKE\"];",
							"",
							"    try {",
							"        const user1 = await api.addUser(rnd.getUser());",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user1.id, rnd.getEvent(category.id));",
							"        vote = rnd.getVote(event.id, user2.id, user1.id, voteTypes[0]);",
							"        vote = await api.addVote(vote);",
							"        pm.environment.set('request_body', JSON.stringify(vote));",
							"",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"    pm.request.body.update({",
							"        mode: 'raw',",
							"        raw: JSON.stringify({...vote, voteType: vote.voteType}),",
							"        options: { raw: { language: 'json' } }",
							"    });",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/votes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"votes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка ивентов с лайками и дизлайками (сортировка по LIKES)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let vote;",
							"    const voteTypes = [\"LIKE\", \"DISLIKE\"];",
							"",
							"    try {",
							"        const user1 = await api.addUser(rnd.getUser());",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user1.id, rnd.getEvent(category.id));",
							"        event = await api.publishEvent(event.id);",
							"        vote = rnd.getVote(event.id, user2.id, user1.id, voteTypes[0]);",
							"        vote = await api.addVote(vote);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json()[0];",
							"",
							"console.log(target);",
							"",
							"pm.test(\"Событие должно содержать поле: likes\", function () {",
							"    pm.expect(target).to.have.property('likes');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(target.likes).equal(1, 'Количество лайков должно соответствовать искомому');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/events?sort=LIKES&from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events"
					],
					"query": [
						{
							"key": "sort",
							"value": "LIKES"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка ивентов с лайками и дизлайками (сортировка по DISLIKES)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let vote;",
							"    const voteTypes = [\"LIKE\", \"DISLIKE\"];",
							"",
							"    try {",
							"        const user1 = await api.addUser(rnd.getUser());",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user1.id, rnd.getEvent(category.id));",
							"        event = await api.publishEvent(event.id);",
							"        vote = rnd.getVote(event.id, user2.id, user1.id, voteTypes[1]);",
							"        vote = await api.addVote(vote);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json()[0];",
							"console.log(target);",
							"",
							"pm.test(\"Событие должно содержать поле: dislikes\", function () {",
							"    pm.expect(target).to.have.property('dislikes');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(target.dislikes).equal(1, 'Количество дизлайков должно соответствовать искомому');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/events?sort=DISLIKES&from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events"
					],
					"query": [
						{
							"key": "sort",
							"value": "DISLIKES"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение пользователя с рейтингом",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let vote;",
							"    const voteTypes = [\"LIKE\", \"DISLIKE\"];",
							"",
							"    try {",
							"        const user1 = await api.addUser(rnd.getUser());",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user1.id, rnd.getEvent(category.id));",
							"        event = await api.publishEvent(event.id);",
							"        vote = rnd.getVote(event.id, user2.id, user1.id, voteTypes[1]);",
							"        vote = await api.addVote(vote);",
							"        pm.collectionVariables.set(\"uid\", user1.id)",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json()[0];",
							"",
							"pm.test(\"Пользователь должно содержать поле: rating\", function () {",
							"    pm.expect(target).to.have.property('rating');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(target.rating).equal(-1, 'Рейтинг должно соответствовать искомому');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/users?ids={{uid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					],
					"query": [
						{
							"key": "ids",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление лайка с события",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let vote;",
							"    const voteTypes = [\"LIKE\", \"DISLIKE\"];",
							"",
							"    try {",
							"        const user1 = await api.addUser(rnd.getUser());",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user1.id, rnd.getEvent(category.id));",
							"",
							"        event = await api.publishEvent(event.id);",
							"        vote = rnd.getVote(event.id, user2.id, user1.id, voteTypes[1]);",
							"        vote = await api.addVote(vote);",
							"        ",
							"        pm.collectionVariables.set(\"user\", user2.id);",
							"        pm.collectionVariables.set(\"event\", event.id);",
							"        pm.collectionVariables.set(\"uid\", user1.id)",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/votes?userId={{user}}&eventId={{event}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"votes"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{user}}"
						},
						{
							"key": "eventId",
							"value": "{{event}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение пользователя с рейтингом после удаления дизлайка",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const target = pm.response.json()[0];",
							"",
							"pm.test(\"Пользователь должно содержать поле: rating\", function () {",
							"    pm.expect(target).to.have.property('rating');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(target.rating).equal(0, 'Рейтинг должно соответствовать искомому');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/users?ids={{uid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					],
					"query": [
						{
							"key": "ids",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addVote(vote, verbose=null) {",
					"        return this.post(\"/votes\", vote, \"Ошибка при добавлении новго лайка: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getVote(eventId, userId, initiatorId, voteType = 0) {",
					"        return {",
					"            userId,",
					"            eventId,",
					"            initiatorId,",
					"            voteType",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "uid",
			"value": ""
		},
		{
			"key": "eventId",
			"value": "{{eventId}}"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "user",
			"value": ""
		},
		{
			"key": "event",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}